@* Pages/Auth/AuthHydrator.razor *@
@inject IJSRuntime JS
@inject IncidentReportingSystem.UI.Core.Auth.AuthState Auth

@code {
    private sealed record Payload(string? token, DateTimeOffset? expUtc);
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        Payload? p = null;
        try { p = await JS.InvokeAsync<Payload>("irsAuth.get"); } catch { }
        Console.WriteLine($"[HYDRATE] tokenLen={(p?.token?.Length ?? 0)}, exp={p?.expUtc:O}");
        await Auth.HydrateAsync(p?.token, p?.expUtc); // marks IsHydrated=true always
    }
}
