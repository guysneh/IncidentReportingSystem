@page "/account/change-password"
@rendermode RenderMode.InteractiveServer
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using System.Net
@inject IncidentReportingSystem.UI.Core.Auth.IAuthService Auth
@inject IncidentReportingSystem.UI.Core.Auth.AuthState AuthState
@inject IncidentReportingSystem.UI.Localization.IAppTexts T

    <div class="container py-4">
        <div class="row justify-content-center">
            <div class="col-12 col-md-8 col-lg-6">
                <div class="card auth-card p-4">
                    <h2 class="h4 mb-3">@T["Account.ChangePassword.Title"]</h2>

                    <EditForm EditContext="_ctx" OnValidSubmit="OnSubmitAsync">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label class="form-label" for="current">@T["Field.Password.Current"]</label>
                            <InputText id="current" class="form-control" type="password" @bind-Value="_vm.CurrentPassword" />
                            <ValidationMessage For="@(() => _vm.CurrentPassword)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label" for="new">@T["Field.Password.New"]</label>
                            <InputText id="new" class="form-control" type="password" @bind-Value="_vm.NewPassword" />
                            <ValidationMessage For="@(() => _vm.NewPassword)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label" for="confirm">@T["Field.Password.Confirm"]</label>
                            <InputText id="confirm" class="form-control" type="password" @bind-Value="_vm.ConfirmNewPassword" />
                            <ValidationMessage For="@(() => _vm.ConfirmNewPassword)" />
                        </div>

                    <button type="submit" class="btn btn-primary"
                            disabled="@(_busy || string.IsNullOrWhiteSpace(AuthState.AccessToken))">
                        @T["Action.Save"]
                    </button>


                        @if (_error is not null)
                        {
                            <div class="alert alert-danger mt-3">@_error</div>
                        }
                        @if (_success)
                        {
                            <div class="alert alert-success mt-3">@T["Account.ChangePassword.Success"]</div>
                        }
                    </EditForm>
                </div>
            </div>
        </div>
    </div>

@code {
    private sealed class Vm
    {
        [Required, DataType(DataType.Password)]
        public string CurrentPassword { get; set; } = string.Empty;

        [Required, DataType(DataType.Password)]
        [MinLength(8)]
        public string NewPassword { get; set; } = string.Empty;

        [Required, DataType(DataType.Password)]
        [Compare(nameof(NewPassword))]
        public string ConfirmNewPassword { get; set; } = string.Empty;
    }

    private readonly Vm _vm = new();
    private EditContext _ctx = default!;
    private bool _busy, _success;
    private string? _error;

    protected override void OnInitialized()
    {
        _ctx = new EditContext(_vm);
    }

    private async Task OnSubmitAsync()
    {
        if (_busy) return;
        _error = null; _success = false;
        if (!_ctx.Validate()) return;

        try
        {
            _busy = true;
            await Auth.ChangePasswordAsync(_vm.CurrentPassword, _vm.NewPassword);
            _success = true;
            _vm.CurrentPassword = _vm.NewPassword = _vm.ConfirmNewPassword = string.Empty;
            _ctx = new EditContext(_vm);
        }
        catch (HttpRequestException ex) when (ex.StatusCode == HttpStatusCode.Unauthorized)
        {
            _error = T["Account.NotAuthorized.Body"];
        }
        catch
        {
            _error = T["Error.Generic"];
        }
        finally
        {
            _busy = false;
            StateHasChanged();
        }
    }
}
