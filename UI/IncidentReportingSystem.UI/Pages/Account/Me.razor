@page "/account"
@rendermode RenderMode.InteractiveServer
@inject IAuthService Auth
@inject IncidentReportingSystem.UI.Core.Auth.AuthState AuthState
@inject IAppTexts T

@if (!AuthState.IsHydrated || Busy)
{
    <div class="text-center py-5"><div class="spinner-border" role="status"></div></div>
}
else if (ErrorKey is not null)
{
    <div class="alert alert-danger">@T[ErrorKey]</div>
}
else if (me is not null)
{
    <div class="container py-4">
        <div class="row justify-content-center">
            <div class="col-md-8 col-lg-6">
                <div class="card auth-card p-4">
                    <div class="d-flex align-items-center justify-content-between mb-3">
                        <h2 class="h4 m-0">@T["Account.Title"]</h2>
                        @if (me.Roles?.Length > 0)
                        {
                            <span class="badge @RoleBadgeClass(PrimaryRole(me))">@PrimaryRole(me)</span>
                        }
                    </div>

                    <dl class="row">
                        <dt class="col-4 text-muted">@T["Field.Email"]</dt>
                        <dd class="col-8">@me.Email</dd>
                        <dt class="col-4 text-muted">@T["Field.Name"]</dt>
                        <dd class="col-8">@((me.DisplayName ?? $"{me.FirstName} {me.LastName}").Trim())</dd>
                        <dt class="col-4 text-muted">@T["Field.Roles"]</dt>
                        <dd class="col-8">@string.Join(", ", me.Roles ?? Array.Empty<string>())</dd>
                    </dl>
                </div>
            </div>
        </div>
    </div>
}

@code {
    bool Busy;
    string? ErrorKey;
    AuthModels.WhoAmI? me;
    bool _loaded;

    protected override void OnInitialized()
    {
        AuthState.Changed += OnAuthChanged;
    }
    public void Dispose() => AuthState.Changed -= OnAuthChanged;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // hydrate complete -> fetch profile once
        if ((firstRender || !_loaded) && AuthState.IsHydrated)
            await EnsureLoadedAsync();
    }

    private async Task OnAuthChanged()
    {
        if (AuthState.IsHydrated && !_loaded)
            await EnsureLoadedAsync();
        await InvokeAsync(StateHasChanged);
    }

    async Task EnsureLoadedAsync()
    {
        if (_loaded || Busy) return;
        Busy = true; ErrorKey = null;
        try
        {
            if (string.IsNullOrWhiteSpace(AuthState.AccessToken))
            {
                ErrorKey = "Account.NotAuthorized.Body";
                return;  
            }

            me = await Auth.MeAsync();
            if (me is null)
            {
                await Task.Delay(150);            // small race guard on first connect
                me = await Auth.MeAsync();
            }
            if (me is null) ErrorKey = "Account.NotAuthorized.Body";
            else _loaded = true;
        }
        finally { Busy = false; StateHasChanged(); }
    }

    static string PrimaryRole(AuthModels.WhoAmI m)
      => m.Roles?.FirstOrDefault() ?? "User";

    static string RoleBadgeClass(string r) => r switch
    {
        "Admin" => "text-bg-danger",
        "User" => "text-bg-primary",
        _ => "text-bg-secondary"
    };
}
