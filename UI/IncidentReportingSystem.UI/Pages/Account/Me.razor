@page "/account"
@implements IDisposable
@using IncidentReportingSystem.UI.Core.Auth
@using static IncidentReportingSystem.UI.Core.Auth.AuthModels
@inject IAuthService Auth
@inject AuthState AuthState
@inject IncidentReportingSystem.UI.Localization.IAppTexts T
@rendermode RenderMode.InteractiveServer

@if (!_ready)
{
    <div class="text-center py-5">
        <div class="spinner-border" role="status" aria-label="@T["Aria.Loading"]"></div>
    </div>
}
else if (_errorKey is not null)
{
    <div class="container py-4">
        <div class="alert alert-danger">@T[_errorKey]</div>
    </div>
}
else if (_me is not null)
{
    <div class="container py-4 text-start">
        <div class="row justify-content-center">
            <div class="col-12 col-md-10 col-lg-8">
                <div class="card account-card p-4 position-relative">
                    <!-- colored role badge in the top corner -->
                    <span class="@RoleBadgeClass(_me)" title="@string.Join(", ", _me.Roles ?? Array.Empty<string>())">
                        @PrimaryRole(_me)
                    </span>

                    <h2 class="h4 m-0 pe-5 mb-3">@T["Account.Title"]</h2>

                    <dl class="row account-dl mb-0">
                        <dt class="col-5 col-sm-4">@T["Field.Email"]</dt>
                        <dd class="col-7 col-sm-8 force-ltr">@_me.Email</dd>

                        <dt class="col-5 col-sm-4">@T["Field.Name"]</dt>
                        <dd class="col-7 col-sm-8">@((_me.DisplayName ?? $"{_me.FirstName} {_me.LastName}").Trim())</dd>

                        <dt class="col-5 col-sm-4">@T["Field.Roles"]</dt>
                        <dd class="col-7 col-sm-8">@string.Join(", ", _me.Roles ?? Array.Empty<string>())</dd>
                    </dl>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private WhoAmI? _me;
    private string? _errorKey;
    private bool _ready;

    protected override void OnInitialized()
    {
        AuthState.Changed += OnAuthStateChanged; // async event (Func<Task>)
    }

    public void Dispose() => AuthState.Changed -= OnAuthStateChanged;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        // Wait up to 2s for hydration (no infinite spinner)
        await AuthState.WaitForHydrationAsync(TimeSpan.FromSeconds(2));
        await LoadAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnAuthStateChanged()
    {
        if (!_ready && AuthState.IsHydrated)
        {
            await LoadAsync();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task LoadAsync()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(AuthState.AccessToken))
            {
                _errorKey = "Account.NotAuthorized.Body";
                return; // stay on page, don't redirect to login
            }

            _me = await Auth.MeAsync();

            if (_me is null)
            {
                await Task.Delay(150); // small retry after full reload / language switch
                _me = await Auth.MeAsync();
            }

            if (_me is null)
                _errorKey = "Account.NotAuthorized.Body";
        }
        finally
        {
            _ready = true;
        }
    }

    // === helpers for the colored role badge ===
    private static string PrimaryRole(WhoAmI me)
        => me.Roles?.FirstOrDefault() ?? "User";

    private static string RoleBadgeClass(WhoAmI me)
    {
        var r = PrimaryRole(me).ToLowerInvariant();
        return r switch
        {
            "admin" => "role-badge role-admin",
            _ => "role-badge role-user"
        };
    }
}
