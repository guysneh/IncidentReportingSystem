@using IncidentReportingSystem.UI.Pages.Auth
@inherits LayoutComponentBase
@inject IncidentReportingSystem.UI.Core.Auth.AuthState AuthState
@inject IncidentReportingSystem.UI.Core.Auth.IAuthService Auth
@inject NavigationManager Nav
@inject IncidentReportingSystem.UI.Localization.IAppTexts T
@inject Microsoft.JSInterop.IJSRuntime JS

<header>
    <DirHydrator />
    <AuthHydrator />

    <div class="app-header border-bottom">
        <div class="app-toolbar container py-2">
            <div class="toolbar-left"></div>

            <div class="toolbar-center">
                <a href="/" class="brand d-inline-flex align-items-center gap-2 text-decoration-none">
                    <!-- SVG logo -->
                    <svg class="app-logo" viewBox="0 0 24 24" width="22" height="22" aria-hidden="true">
                        <defs>
                            <linearGradient id="brand-g" x1="0" y1="0" x2="1" y2="0">
                                <stop offset="0" stop-color="#111" />
                                <stop offset="1" stop-color="#FFCD00" />
                            </linearGradient>
                        </defs>
                        <path d="M12 2l7 4v5c0 5-3.5 8-7 9-3.5-1-7-4-7-9V6l7-4z"
                              fill="url(#brand-g)" stroke="#000" stroke-opacity=".15" stroke-width=".6" />
                        <path d="M12 7l-1.5 3h2L11 14l4-4h-2l1-3z" fill="#fff" />
                    </svg>
                    <span class="brand-title">@T["Brand.Title"]</span>
                </a>
            </div>

            <div class="toolbar-right">
                <LanguageSwitcher />
                <ThemeSwitch />
                @if (!IsWelcome)
                {
                    <button class="btn btn-outline-secondary btn-sm" @onclick="OnLogout">
                        @T["Action.Logout"]
                    </button>
                    <button class="btn btn-outline-secondary btn-sm btn-icon"
                            type="button"
                            data-bs-toggle="offcanvas"
                            data-bs-target="#appSideNav"
                            aria-controls="appSideNav"
                            aria-label="@T["Nav.Menu"]"
                            title="@T["Nav.Menu"]">
                        <svg viewBox="0 0 24 24" width="18" height="18" aria-hidden="true">
                            <path d="M3 6h18v2H3zm0 5h18v2H3zm0 5h18v2H3z" />
                        </svg>
                    </button>
                }
            </div>
        </div>
    </div>

    @if (!IsWelcome)
    {
        <OffcanvasMenu />
    }
</header>

<main>
    @if (IsWelcome)
    {
        @Body
    }
    else
    {
        <AuthGuard>
            <div class="container py-3">
                <ErrorBoundary>
                    <ChildContent>
                        @Body
                    </ChildContent>
                    <ErrorContent>
                        <div class="alert alert-danger my-4">
                            <strong>Unhandled UI error</strong>
                            <div class="small mt-2">@context?.Message</div>
                        </div>
                    </ErrorContent>
                </ErrorBoundary>
            </div>
        </AuthGuard>
    }
</main>

@code {
    bool IsWelcome => Nav.Uri.EndsWith("/", StringComparison.OrdinalIgnoreCase) ||
                      Nav.Uri.EndsWith("/welcome", StringComparison.OrdinalIgnoreCase);

    private async Task OnLogout()
    {
        try { await Auth.SignOutAsync(); } catch { }
        await AuthState.ClearAsync();
        try { await JS.InvokeVoidAsync("irsAuth.clear"); } catch { }
        Nav.NavigateTo("/", forceLoad: true);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        var culture = System.Globalization.CultureInfo.CurrentUICulture.Name;
        try { await JS.InvokeVoidAsync("irsRtl.applyByCulture", culture); } catch { }
    }

    protected override void OnInitialized()
    {
        AuthState.Changed += OnAuthChanged;
        Nav.LocationChanged += OnLocationChanged;
    }

    public void Dispose()
    {
        AuthState.Changed -= OnAuthChanged;
        Nav.LocationChanged -= OnLocationChanged;
    }

    private Task OnAuthChanged()
    {
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        try { await JS.InvokeVoidAsync("irsUi.offcanvasHide", "#appSideNav"); }
        catch { /* noop */ }
    }
}
