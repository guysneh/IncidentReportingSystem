name: "Terraform (manual)"

on:
  workflow_dispatch:
    inputs:
      action:
        description: "What to run (plan or apply)"
        required: true
        default: plan
      directory:
        description: "Terraform working directory (relative to repo root)"
        required: true
        default: IncidentReportingSystem/terraform
      db_admin_username:
        description: "DB admin username (non-sensitive)"
        required: true
        default: incident_admin
      name_prefix:
        description: "Naming prefix for resources"
        required: true
        default: incident
        
permissions:
  id-token: write
  contents: read

jobs:
  tf:
    runs-on: ubuntu-latest
    concurrency:
      group: terraform-manual

    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Normalize TF dir"
        shell: bash
        run: |
          DIR='${{ inputs.directory }}'
          # הסרת מירכאות אם הוקלדו בשדה ה-UI
          DIR="${DIR%\"}"; DIR="${DIR#\"}"
          echo "TF_WORKING_DIR=$DIR" >> $GITHUB_ENV
          echo "Using TF_WORKING_DIR='$DIR'"

      - name: "Debug - list root & TF dir"
        shell: bash
        run: |
          pwd
          echo "== list root =="
          ls -la
          echo "== check TF dir =="
          ls -la "$TF_WORKING_DIR" || true

      - name: "Setup Terraform 1.9.5"
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      - name: "Azure login (OIDC)"
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: "Export ARM_* env for Terraform OIDC"
        shell: bash
        run: |
          echo "ARM_USE_OIDC=true" >> $GITHUB_ENV
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_OIDC_TOKEN_FILE_PATH=${AZURE_FEDERATED_TOKEN_FILE}" >> $GITHUB_ENV

      - name: "Export TF_VAR_* (sensitive vars)"
        shell: bash
        run: |
          echo "TF_VAR_action_group_email=${{ secrets.ALERT_EMAIL }}" >> $GITHUB_ENV

      - name: "Debug - show backend.hcl"
        shell: bash
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          echo "=== backend.hcl ==="
          sed -n '1,200p' backend.hcl || true

      - name: "Export TF_VAR_* (vars for root module)"
        shell: bash
        run: |
          echo "TF_VAR_action_group_email=${{ secrets.ALERT_EMAIL }}" >> $GITHUB_ENV
          echo "TF_VAR_db_admin_username=${{ inputs.db_admin_username }}" >> $GITHUB_ENV
          echo "TF_VAR_name_prefix=${{ inputs.name_prefix }}" >> $GITHUB_ENV
          echo "TF_VAR_jwt_issuer=${{ secrets.JWT_ISSUER }}" >> $GITHUB_ENV
          echo "TF_VAR_jwt_audience=${{ secrets.JWT_AUDIENCE }}" >> $GITHUB_ENV

      - name: "Debug - show TF_VAR_* names"
        shell: bash
        run: |
          echo "TF_VAR_* visible to this job:"
          env | sort | grep '^TF_VAR_' || true


      - name: "Terraform Init"
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init -backend-config="backend.hcl" -input=false

      - name: "Terraform Validate"
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform validate

      - name: "Terraform Plan"
        if: ${{ inputs.action == 'plan' }}
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform plan -no-color -input=false \
            -var "db_admin_username=${{ inputs.db_admin_username }}" \
            -var "name_prefix=${{ inputs.name_prefix }}" \
            -var "jwt_issuer=${{ secrets.JWT_ISSUER }}" \
            -var "jwt_audience=${{ secrets.JWT_AUDIENCE }}"
      
      - name: "Terraform Apply"
        if: ${{ inputs.action == 'apply' }}
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform apply -auto-approve -input=false \
            -var "db_admin_username=${{ inputs.db_admin_username }}" \
            -var "name_prefix=${{ inputs.name_prefix }}" \
            -var "jwt_issuer=${{ secrets.JWT_ISSUER }}" \
            -var "jwt_audience=${{ secrets.JWT_AUDIENCE }}"

