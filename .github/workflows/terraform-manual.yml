name: "Terraform (manual)"
on:
  workflow_dispatch:
    inputs:
      action:
        description: "What to run (plan or apply)"
        required: true
        default: plan
      directory:
        description: "Terraform working directory (relative to repo root)"
        required: true
        default: IncidentReportingSystem/terraform

permissions:
  id-token: write
  contents: read

jobs:
  tf:
    runs-on: ubuntu-latest
    concurrency:
      group: terraform-manual
    env:
      APP_CONFIG_NAME: "incident-appcfg"
      APP_CONFIG_LOCATION: "northeurope"
      
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Set TF working dir"
        shell: bash
        run: |
          DIR='${{ inputs.directory }}'
          DIR="${DIR%\"}"; DIR="${DIR#\"}"
          echo "TF_WORKING_DIR=$DIR" >> $GITHUB_ENV
          echo "Using TF_WORKING_DIR='$DIR'"

      - name: "Setup Terraform 1.9.5"
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      - name: "Azure login (OIDC)"
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Ensure the CI principal can enumerate/purge soft-deleted App Config stores
      - name: "Ensure App Configuration Data Owner (CI)"
        shell: bash
        run: |
          SP_OBJ=$(az ad sp show --id "${{ secrets.AZURE_CLIENT_ID }}" --query id -o tsv)
          SCOPE="/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          az role assignment create \
            --assignee-object-id "$SP_OBJ" \
            --assignee-principal-type ServicePrincipal \
            --role "App Configuration Data Owner" \
            --scope "$SCOPE" >/dev/null 2>&1 || echo "Role already present or not needed."

      # Purge soft-deleted store if exists (avoids provider soft-deleted error)
      - name: "Purge soft-deleted App Configuration (if exists)"
        shell: bash
        env:
          SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          NAME: ${{ env.APP_CONFIG_NAME }}
          LOCATION: ${{ env.APP_CONFIG_LOCATION }}
        run: |
          set -e
          BASE="https://management.azure.com/subscriptions/$SUBSCRIPTION_ID/providers/Microsoft.AppConfiguration/locations/$LOCATION"
          LIST_URL="$BASE/deletedConfigurationStores?api-version=2024-06-01"
          PURGE_URL="$BASE/deletedConfigurationStores/$NAME/purge?api-version=2024-06-01"
          COUNT=$(az rest --method get --url "$LIST_URL" --query "value[?name=='$NAME'] | length(@)" -o tsv || echo "0")
          if [ "${COUNT:-0}" -gt 0 ]; then
            echo "Purging soft-deleted '$NAME' in '$LOCATION'..."
            az rest --method post --url "$PURGE_URL" >/dev/null
            # give ARM few seconds to finalize purge
            sleep 10
          else
            echo "No soft-deleted '$NAME' found in '$LOCATION'."
          fi
          
      # OIDC -> Terraform provider/backend (AAD/RBAC, no account keys)
      - name: "Export ARM_* env"
        shell: bash
        run: |
          echo "ARM_USE_OIDC=true" >> $GITHUB_ENV
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_OIDC_TOKEN_FILE_PATH=${AZURE_FEDERATED_TOKEN_FILE}" >> $GITHUB_ENV

      - name: "Export TF_VAR_action_group_email"
        shell: bash
        run: echo "TF_VAR_action_group_email=${{ secrets.ALERT_EMAIL }}" >> $GITHUB_ENV

      - name: "Terraform Init (AAD backend)"
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init -backend-config="backend.hcl" -input=false

      - name: "Terraform Validate"
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform validate

      - name: "Terraform Plan"
        if: ${{ inputs.action == 'plan' }}
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform plan -no-color -input=false

      - name: "Terraform Apply"
        if: ${{ inputs.action == 'apply' }}
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -auto-approve -input=false
