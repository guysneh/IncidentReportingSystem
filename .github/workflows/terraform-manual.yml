name: "Terraform (manual)"
on:
  workflow_dispatch:
    inputs:
      action:
        description: "What to run (plan or apply)"
        required: true
        default: plan
      directory:
        description: "Terraform working directory (relative to repo root)"
        required: true
        default: IncidentReportingSystem/terraform

permissions:
  id-token: write
  contents: read

jobs:
  tf:
    runs-on: ubuntu-latest
    concurrency:
      group: terraform-manual

    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Set TF working dir"
        shell: bash
        run: |
          DIR='${{ inputs.directory }}'
          DIR="${DIR%\"}"; DIR="${DIR#\"}"
          echo "TF_WORKING_DIR=$DIR" >> $GITHUB_ENV
          echo "Using TF_WORKING_DIR='$DIR'"

      - name: "Setup Terraform 1.9.5"
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      - name: "Azure login (OIDC)"
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # OIDC -> Terraform provider/backend (AAD/RBAC, no account keys)
      - name: "Export ARM_* env"
        shell: bash
        run: |
          echo "ARM_USE_OIDC=true" >> $GITHUB_ENV
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_OIDC_TOKEN_FILE_PATH=${AZURE_FEDERATED_TOKEN_FILE}" >> $GITHUB_ENV

      # - name: "Export TF_VAR for jwt (optional)"
      #   shell: bash
      #   run: |
      #     echo "TF_VAR_jwt_issuer=${{ secrets.JWT_ISSUER }}" >> $GITHUB_ENV
      #     echo "TF_VAR_jwt_audience=${{ secrets.JWT_AUDIENCE }}" >> $GITHUB_ENV

      - name: "Export TF_VAR_action_group_email"
        shell: bash
        run: echo "TF_VAR_action_group_email=${{ secrets.ALERT_EMAIL }}" >> $GITHUB_ENV

      - name: "Terraform Init (AAD backend)"
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init -backend-config="backend.hcl" -input=false

      - name: "Terraform Validate"
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform validate

      - name: "Terraform Plan"
        if: ${{ inputs.action == 'plan' }}
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform plan -no-color -input=false

      - name: "Terraform Apply"
        if: ${{ inputs.action == 'apply' }}
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -auto-approve -input=false
