name: Deploy IncidentReportingSystem (.NET 8) to Azure Web App

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

defaults:
  run:
    shell: bash

env:
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  RESOURCE_GROUP: "incident-rg"
  WEBAPP_NAME: "incident-api"
  PROJECT_PATH: "IncidentReportingSystem/IncidentReportingSystem.API/IncidentReportingSystem.API.csproj"
  DB_PROJECT_PATH: "IncidentReportingSystem/IncidentReportingSystem.Infrastructure/IncidentReportingSystem.Infrastructure.csproj"
  KEY_VAULT_NAME: "incident-kv"

  PG_SERVER_NAME: "incident-db"
  TEMP_RULE_NAME: "gh-runner-temp"

  ADMIN_CONN_SECRET: "PostgreSqlConnectionString"

  BASE_URL: "https://incident-api.azurewebsites.net"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # ----- Build artifacts -----
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore
        run: dotnet restore "${{ env.PROJECT_PATH }}"

      - name: Build
        run: dotnet build "${{ env.PROJECT_PATH }}" --configuration Release --no-restore

      - name: Publish
        run: dotnet publish "${{ env.PROJECT_PATH }}" --configuration Release --output ./publish --no-build

      - name: Zip artifact
        run: |
          cd publish
          zip -r ../app.zip .
          cd ..

      # ----- Azure login -----
      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      # ----- Open temporary firewall for runner IP (Postgres) -----
      - name: Detect runner public IP
        id: ip
        run: |
          RUNNER_IP=$(curl -s https://api.ipify.org)
          echo "ip=$RUNNER_IP" >> $GITHUB_OUTPUT
          echo "Runner IP: $RUNNER_IP"

      - name: Add temporary Postgres firewall rule
        run: |
          az postgres flexible-server firewall-rule create \
            --resource-group "${{ env.RESOURCE_GROUP }}" \
            --name "${{ env.PG_SERVER_NAME }}" \
            --rule-name "${{ env.TEMP_RULE_NAME }}" \
            --start-ip-address "${{ steps.ip.outputs.ip }}" \
            --end-ip-address "${{ steps.ip.outputs.ip }}" \
            --only-show-errors --output none

      # ----- EF Core migrations out-of-band (admin connection) -----
      - name: Install dotnet-ef
        run: |
          dotnet tool install -g dotnet-ef
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Fetch ADMIN connection string from Key Vault
        id: adminconn
        run: |
          set -e
          NAME="${{ env.ADMIN_CONN_SECRET }}"
          CONN=$(az keyvault secret show \
            --vault-name "${{ env.KEY_VAULT_NAME }}" \
            --name "$NAME" \
            --query value -o tsv)
          if [ -z "$CONN" ]; then
            echo "Secret $NAME is empty or missing in Key Vault ${{ env.KEY_VAULT_NAME }}"
            exit 1
          fi
          if [[ "$CONN" == *"__PORT__"* || "$CONN" == *"__HOST__"* || "$CONN" == *"__DB__"* ]]; then
            echo "Secret $NAME contains placeholders. Fix the secret value in Key Vault."
            PORT=$(echo "$CONN" | sed -n 's/.*Port=\([^;]*\).*/\1/p')
            echo "Port field in secret is: '$PORT'"
            exit 1
          fi
          echo "::add-mask::$CONN"
          echo "CONN=$CONN" >> $GITHUB_ENV

      - name: Apply EF migrations (explicit connection)
        env:
          DOTNET_NOLOGO: true
        run: |
          dotnet ef database update \
            --project "${{ env.DB_PROJECT_PATH }}" \
            --startup-project "${{ env.PROJECT_PATH }}" \
            --configuration Release \
            --connection "$CONN"

      # ----- Ensure minimal app settings (only if missing) -----
      - name: Ensure AppConfig bootstrap settings on Web App (hardened)
        run: |
          set -euo pipefail
          RG="${{ env.RESOURCE_GROUP }}"
          APP="${{ env.WEBAPP_NAME }}"
          # Trim CR/LF/whitespace just in case
          EP="$(az appconfig show --name incident-appcfg --resource-group "$RG" --query endpoint -o tsv | tr -d '\r' | xargs)"
      
          echo "RG=$RG APP=$APP EP=$EP"
      
          # Validate endpoint shape
          if ! echo "$EP" | grep -Eq '^https://[a-z0-9-]+\.azconfig\.io/?$'; then
            echo "ERROR: Unexpected AppConfig endpoint: '$EP'"
            exit 1
          fi
          EP="${EP%/}"
      
          # Make sure the web app exists
          az webapp show -g "$RG" -n "$APP" -o none
      
          # Set keys using __ (double underscore)
          az webapp config appsettings set \
            --resource-group "$RG" \
            --name "$APP" \
            --settings \
              AppConfig__Enabled=true \
              AppConfig__Endpoint="$EP" \
            --output none
      
          # Verify
          az webapp config appsettings list -g "$RG" -n "$APP" -o tsv \
            | grep -E '^(AppConfig__Enabled|AppConfig__Endpoint)\s' >/dev/null
      
          echo "App Service appsettings ensured for AppConfig bootstrap."


      - name: Ensure jwt-secret exists (idempotent)
        run: |
          set -e
          KV="${{ env.KEY_VAULT_NAME }}"
          NAME="jwt-secret"
          if az keyvault secret show --vault-name "$KV" --name "$NAME" >/dev/null 2>&1; then
            echo "Secret $NAME exists; skipping."
          else
            # 64 bytes, URL-safe
            VAL=$(openssl rand -base64 64 | tr -d '\n' | sed -e 's/[\/+=]/_/g')
            az keyvault secret set --vault-name "$KV" --name "$NAME" --value "$VAL" --description "JWT signing key" >/dev/null
            echo "Secret $NAME created."
          fi

      - name: Get App Configuration endpoint
        id: appcfg
        run: |
          set -e
          NAME="incident-appcfg"
          RG="${{ env.RESOURCE_GROUP }}"
          EP=$(az appconfig show --name "$NAME" --resource-group "$RG" --query endpoint -o tsv)
          if [ -z "$EP" ]; then
            echo "Could not resolve App Configuration endpoint for $NAME"
            exit 1
          fi
          echo "endpoint=$EP" >> $GITHUB_OUTPUT
          echo "AppConfig endpoint: $EP"
      
      - name: Ensure AppConfig bootstrap settings on Web App
        run: |
          set -e
          RG="${{ env.RESOURCE_GROUP }}"
          APP="${{ env.WEBAPP_NAME }}"
          EP="${{ steps.appcfg.outputs.endpoint }}"
      
          # Set both settings idempotently
          az webapp config appsettings set \
            --resource-group "$RG" \
            --name "$APP" \
            --settings \
              "AppConfig:Enabled=true" \
              "AppConfig:Endpoint=$EP" \
            --output none
      
          echo "App Service appsettings ensured for AppConfig bootstrap."

      # ----- Deploy ZIP to Web App -----
      - name: Deploy ZIP to Web App
        run: |
          az webapp deploy \
            --resource-group "${{ env.RESOURCE_GROUP }}" \
            --name "${{ env.WEBAPP_NAME }}" \
            --type zip \
            --src-path "app.zip"

      - name: Enable application logs (once)
        run: |
          az webapp log config \
            -g "${{ env.RESOURCE_GROUP }}" -n "${{ env.WEBAPP_NAME }}" \
            --application-logging filesystem --level information

      # ----- Post-deploy checks -----
      - name: Wait for /health 200 (max 120s, backoff)
        run: |
          set -e
          URL="${{ env.BASE_URL }}/health"
          DEADLINE=$(( $(date +%s) + 120 ))
          SLEEP=2
          while true; do
            CODE=$(curl -s -o /dev/null -w "%{http_code}" "$URL" || true)
            if [ "$CODE" = "200" ]; then
              echo "Health OK"
              break
            fi
            if [ $(date +%s) -ge $DEADLINE ]; then
              echo "Health failed: last HTTP $CODE"
              exit 1
            fi
            echo "Health not ready (HTTP $CODE), retrying in ${SLEEP}s..."
            sleep $SLEEP
            if [ $SLEEP -lt 10 ]; then SLEEP=$((SLEEP+2)); fi
          done

      - name: Dump last logs on failure
        if: failure()
        run: |
          timeout 60 az webapp log tail \
            -g "${{ env.RESOURCE_GROUP }}" -n "${{ env.WEBAPP_NAME }}" | tail -n 200 || true

      # ----- Always cleanup temporary firewall rule -----
      - name: Remove temporary Postgres firewall rule
        if: always()
        run: |
          az postgres flexible-server firewall-rule delete \
            --resource-group "${{ env.RESOURCE_GROUP }}" \
            --name "${{ env.PG_SERVER_NAME }}" \
            --rule-name "${{ env.TEMP_RULE_NAME }}" -y
