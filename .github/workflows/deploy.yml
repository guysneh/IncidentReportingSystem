name: Deploy IncidentReportingSystem (.NET 8) to Azure Web App

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

defaults:
  run:
    shell: bash

env:
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  RESOURCE_GROUP: "incident-rg"
  WEBAPP_NAME: "incident-api"
  PROJECT_PATH: "IncidentReportingSystem/IncidentReportingSystem.API/IncidentReportingSystem.API.csproj"
  KEY_VAULT_NAME: "incident-kv"
  SECRET_NAME: "PostgreSqlConnectionString"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - run: dotnet restore "${{ env.PROJECT_PATH }}"
      - run: dotnet build "${{ env.PROJECT_PATH }}" --configuration Release --no-restore
      - run: dotnet publish "${{ env.PROJECT_PATH }}" --configuration Release --output ./publish --no-build

      - run: |
          cd publish
          zip -r ../app.zip .
          cd ..

      - uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Install dotnet-ef
        run: |
          dotnet tool install -g dotnet-ef
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Fetch connection string from Key Vault
        run: |
          CONN=$(az keyvault secret show --vault-name "$KEY_VAULT_NAME" --name "$SECRET_NAME" --query value -o tsv)
          {
            echo 'CONN<<EOF'
            echo "$CONN"
            echo EOF
          } >> $GITHUB_ENV

      - name: Run EF Core migrations
        env:
          ASPNETCORE_ENVIRONMENT: Production
          ConnectionStrings__Default: ${{ env.CONN }}
        run: |
          dotnet ef database update \
            --project "${{ env.PROJECT_PATH }}" \
            --startup-project "${{ env.PROJECT_PATH }}"

      - run: |
          az webapp deploy \
            --resource-group "${{ env.RESOURCE_GROUP }}" \
            --name "${{ env.WEBAPP_NAME }}" \
            --type zip \
            --src-path "app.zip"
