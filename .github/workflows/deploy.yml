name: Deploy IncidentReportingSystem (.NET 8) to Azure Web App

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

defaults:
  run:
    shell: bash

env:
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  RESOURCE_GROUP: "incident-rg"
  WEBAPP_NAME: "incident-api"
  PROJECT_PATH: "IncidentReportingSystem/IncidentReportingSystem.API/IncidentReportingSystem.API.csproj"
  DB_PROJECT_PATH: "IncidentReportingSystem/IncidentReportingSystem.Infrastructure/IncidentReportingSystem.Infrastructure.csproj"
  KEY_VAULT_NAME: "incident-kv"
  SECRET_NAME: "PostgreSqlConnectionString"
  PG_SERVER_NAME: "incident-db"
  TEMP_RULE_NAME: "gh-runner-temp"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - run: dotnet restore "${{ env.PROJECT_PATH }}"
      - run: dotnet build "${{ env.PROJECT_PATH }}" --configuration Release --no-restore
      - run: dotnet publish "${{ env.PROJECT_PATH }}" --configuration Release --output ./publish --no-build

      - run: |
          cd publish
          zip -r ../app.zip .
          cd ..

      - uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Detect runner public IP
        id: ip
        run: |
          RUNNER_IP=$(curl -s https://api.ipify.org)
          echo "ip=$RUNNER_IP" >> $GITHUB_OUTPUT

      - name: Install dotnet-ef
        run: |
          dotnet tool install -g dotnet-ef
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Fetch connection string from Key Vault
        run: |
          CONN=$(az keyvault secret show --vault-name "$KEY_VAULT_NAME" --name "$SECRET_NAME" --query value -o tsv)
          {
            echo 'CONN<<EOF'
            echo "$CONN"
            echo EOF
          } >> $GITHUB_ENV

      - run: |
          az webapp deploy \
            --resource-group "${{ env.RESOURCE_GROUP }}" \
            --name "${{ env.WEBAPP_NAME }}" \
            --type zip \
            --src-path "app.zip"
            
      - name: Enable application logs (once)
        run: |
          az webapp log config \
            -g incident-rg -n incident-api \
            --application-logging filesystem --level information
      
      - name: Enable EF migrations flag and restart
        run: |
          az webapp config appsettings set -g incident-rg -n incident-api --settings "EF:ApplyMigrations=true"
          az webapp restart -g incident-rg -n incident-api
      
      - name: Wait for migrations to complete (tail logs up to 120s)
        run: |
          timeout 120 az webapp log tail -g incident-rg -n incident-api | tee app_logs.txt
          if ! grep -q "EF migrations applied successfully." app_logs.txt; then
            echo "Migrations marker not found in logs"; exit 1; fi
      
      - name: Disable EF migrations flag and restart
        if: always()
        run: |
          az webapp config appsettings delete -g incident-rg -n incident-api --setting-names "EF:ApplyMigrations"
          az webapp restart -g incident-rg -n incident-api

