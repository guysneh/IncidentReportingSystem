name: Deploy IncidentReportingSystem (.NET 8) to Azure Web App

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

defaults:
  run:
    shell: bash

env:
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  RESOURCE_GROUP: "incident-rg"
  WEBAPP_NAME: "incident-api"
  PROJECT_PATH: "IncidentReportingSystem/IncidentReportingSystem.API/IncidentReportingSystem.API.csproj"
  DB_PROJECT_PATH: "IncidentReportingSystem/IncidentReportingSystem.Infrastructure/IncidentReportingSystem.Infrastructure.csproj"
  KEY_VAULT_NAME: "incident-kv"
  SECRET_NAME: "PostgreSqlConnectionString"
  BASE_URL: "https://incident-api.azurewebsites.net"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore
        run: dotnet restore "${{ env.PROJECT_PATH }}"

      - name: Build
        run: dotnet build "${{ env.PROJECT_PATH }}" --configuration Release --no-restore

      - name: Publish
        run: dotnet publish "${{ env.PROJECT_PATH }}" --configuration Release --output ./publish --no-build

      - name: Zip artifact
        run: |
          cd publish
          zip -r ../app.zip .
          cd ..

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      # --- Run EF migrations against Azure Postgres BEFORE deploying (no app restart needed) ---
      - name: Install dotnet-ef
        run: |
          dotnet tool install -g dotnet-ef
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Fetch connection string from Key Vault
        run: |
          CONN=$(az keyvault secret show --vault-name "$KEY_VAULT_NAME" --name "$SECRET_NAME" --query value -o tsv)
          {
            echo 'CONN<<EOF'
            echo "$CONN"
            echo EOF
          } >> $GITHUB_ENV

      - name: Apply EF migrations (out-of-band)
        env:
          DOTNET_NOLOGO: true
        run: |
          # Supply the connection string via environment variable so the design-time factory picks it up
          export ConnectionStrings__DefaultConnection="$CONN"
          export ASPNETCORE_ENVIRONMENT=Production
          export DOTNET_ENVIRONMENT=Production
      
          dotnet ef database update \
            --project "${{ env.DB_PROJECT_PATH }}" \
            --startup-project "${{ env.PROJECT_PATH }}" \
            --configuration Release



      # --- Deploy ZIP ---
      - name: Deploy ZIP to Web App
        run: |
          az webapp deploy \
            --resource-group "${{ env.RESOURCE_GROUP }}" \
            --name "${{ env.WEBAPP_NAME }}" \
            --type zip \
            --src-path "app.zip"

      - name: Enable application logs
        run: |
          az webapp log config \
            -g "${{ env.RESOURCE_GROUP }}" -n "${{ env.WEBAPP_NAME }}" \
            --application-logging filesystem --level information

      # --- Post-deploy checks ---
      - name: Wait for /health 200 (max 120s, backoff)
        run: |
          set -e
          URL="${{ env.BASE_URL }}/health"
          DEADLINE=$(( $(date +%s) + 120 ))
          SLEEP=2
          while true; do
            CODE=$(curl -s -o /dev/null -w "%{http_code}" "$URL" || true)
            if [ "$CODE" = "200" ]; then
              echo "Health OK"
              break
            fi
            if [ $(date +%s) -ge $DEADLINE ]; then
              echo "Health failed: last HTTP $CODE"
              exit 1
            fi
            echo "Health not ready (HTTP $CODE), retrying in ${SLEEP}s..."
            sleep $SLEEP
            if [ $SLEEP -lt 10 ]; then SLEEP=$((SLEEP+2)); fi
          done

      - name: DB smoke (GET IncidentReports must be 200)
        run: |
          set -e
          TOKEN=$(curl -s "${{ env.BASE_URL }}/api/v1/Auth/token?userId=ci-smoke&role=Reader")
          CODE=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer $TOKEN" "${{ env.BASE_URL }}/api/v1/IncidentReports?skip=0&take=1" || true)
          if [ "$CODE" != "200" ]; then
            echo "DB smoke failed. HTTP $CODE"
            exit 1
          fi
          echo "DB smoke OK"

      - name: Dump last logs on failure
        if: failure()
        run: |
          timeout 60 az webapp log tail -g "${{ env.RESOURCE_GROUP }}" -n "${{ env.WEBAPP_NAME }}" | tail -n 200 || true
