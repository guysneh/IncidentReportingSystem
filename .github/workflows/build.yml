name: Build and Test

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  checks: write
  contents: read
  pull-requests: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      TEST_DB_CONNECTION: Host=localhost;Port=5444;Database=testdb;Username=testuser;Password=testpassword
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        ports:
          - 5444:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: Restore dependencies
        run: dotnet restore IncidentReportingSystem/IncidentReportingSystem.sln

      - name: Build solution
        run: dotnet build IncidentReportingSystem/IncidentReportingSystem.sln --no-restore --configuration Release

      - name: Run unit tests with coverage
        run: |
          dotnet test IncidentReportingSystem/IncidentReportingSystem.Tests/IncidentReportingSystem.Tests.csproj \
            --no-build \
            --configuration Release \
            --logger "trx;LogFileName=unit-tests.trx" \
            --collect:"XPlat Code Coverage" \
            --results-directory IncidentReportingSystem/TestResults
            
      - name: Wait for PostgreSQL to be ready
        run: |
          for i in {1..10}; do
            nc -z postgres 5444 && echo "Postgres is up!" && exit 0
            echo "Waiting for Postgres..."
            sleep 3
          done
          echo "Postgres did not become ready in time." && exit 1
          
      - name: Run integration tests with coverage
        run: |
          dotnet test IncidentReportingSystem/IncidentReportingSystem.IntegrationTests/IncidentReportingSystem.IntegrationTests.csproj \
            --no-build \
            --configuration Release \
            --logger "trx;LogFileName=integration-tests.trx" \
            --collect:"XPlat Code Coverage" \
            --results-directory IncidentReportingSystem/TestResults

      - name: Publish unit test results
        uses: dorny/test-reporter@v1
        with:
          name: Unit Tests
          path: IncidentReportingSystem/TestResults/**/*unit-tests.trx
          reporter: dotnet-trx
          fail-on-error: true
          fail-on-empty: false

      - name: Publish integration test results
        uses: dorny/test-reporter@v1
        with:
          name: Integration Tests
          path: IncidentReportingSystem/TestResults/**/*integration-tests.trx
          reporter: dotnet-trx
          fail-on-error: true
          fail-on-empty: false

      - name: Generate HTML code coverage report
        uses: danielpalme/ReportGenerator-GitHub-Action@5.1.26
        with:
          reports: IncidentReportingSystem/TestResults/**/coverage.cobertura.xml
          targetdir: IncidentReportingSystem/TestResults/CoverageReport
          reporttypes: Html

      - name: Upload code coverage report
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: IncidentReportingSystem/TestResults/CoverageReport