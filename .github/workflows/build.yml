name: Build, Test, Analyze

on:
  workflow_dispatch:

permissions:
  checks: write
  contents: read
  pull-requests: write

jobs:
  ci:
    runs-on: ubuntu-latest

    env:
      ASPNETCORE_ENVIRONMENT: Test
      AppConfig__Enabled: "false"
      ConnectionStrings__DefaultConnection: Host=localhost;Port=5444;Database=testdb;Username=testuser;Password=testpassword
      TEST_DB_CONNECTION: Host=localhost;Port=5444;Database=testdb;Username=testuser;Password=testpassword
      Cors__AllowedOrigins: "http://example.com"
      Api__BasePath: "/api"
      Api__Version: "v1"

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        ports:
          - 5444:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Setup Java 17 (Sonar)
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin

      - name: Restore
        run: dotnet restore IncidentReportingSystem/IncidentReportingSystem.sln

      - name: Sonar BEGIN
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet tool update --global dotnet-sonarscanner
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH
          dotnet-sonarscanner begin \
            /k:"guysneh_IncidentReportingSystem" \
            /o:"guysne" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" \
            /d:sonar.coverage.exclusions="**/Migrations/**,**/Dtos/**,**/*Dto.cs,**/Program.cs,**/ConfigureSwagger*.cs,**/GlobalUsings.cs,**/Generated/**"

      - name: Build (Release)
        run: dotnet build IncidentReportingSystem/IncidentReportingSystem.sln --no-restore --configuration Release

      - name: Wait for PostgreSQL
        run: |
          for i in {1..12}; do
            nc -z localhost 5444 && echo "Postgres is up!" && exit 0
            echo "Waiting for Postgres on localhost:5444..."
            sleep 5
          done
          echo "Postgres did not become ready in time." && exit 1

      - name: Test (Unit) with coverage + thresholds
        run: |
          dotnet test IncidentReportingSystem/IncidentReportingSystem.Tests/IncidentReportingSystem.Tests.csproj \
            --no-build --configuration Release \
            --logger "trx;LogFileName=unit-tests.trx" \
            /p:CollectCoverage=true \
            /p:CoverletOutputFormat=opencover \
            /p:CoverletOutput=IncidentReportingSystem/TestResults/Unit/ \
            /p:Threshold=80 /p:ThresholdType=line /p:ThresholdStat=total

      - name: Test (Integration) with coverage + thresholds
        run: |
          dotnet test IncidentReportingSystem/IncidentReportingSystem.IntegrationTests/IncidentReportingSystem.IntegrationTests.csproj \
            --no-build --configuration Release \
            --logger "trx;LogFileName=integration-tests.trx" \
            /p:CollectCoverage=true \
            /p:CoverletOutputFormat=opencover \
            /p:CoverletOutput=IncidentReportingSystem/TestResults/Integration/ \
            /p:Threshold=80 /p:ThresholdType=line /p:ThresholdStat=total

      - name: Sonar END
        if: always()
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

      - name: Publish Unit Test results
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: Unit Tests
          path: IncidentReportingSystem/TestResults/**/*unit-tests.trx
          reporter: dotnet-trx
          fail-on-error: true
          fail-on-empty: false

      - name: Publish Integration Test results
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: Integration Tests
          path: IncidentReportingSystem/TestResults/**/*integration-tests.trx
          reporter: dotnet-trx
          fail-on-error: true
          fail-on-empty: false

      - name: Generate HTML coverage
        if: always()
        uses: danielpalme/ReportGenerator-GitHub-Action@5.1.26
        with:
          reports: IncidentReportingSystem/TestResults/**/coverage.opencover.xml
          targetdir: IncidentReportingSystem/TestResults/CoverageReport
          reporttypes: Html

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: IncidentReportingSystem/TestResults/CoverageReport

      - name: Upload raw results (trx + opencover)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: raw-test-results
          path: |
            IncidentReportingSystem/TestResults/**/*.trx
            IncidentReportingSystem/TestResults/**/coverage.opencover.xml
